
models that work:
- llamacorn
- codeninja


models that don't work:
- deepseek coder
- hermes pro 2
- 



# TODO
- maybe make an instruct...doc maker reader...thing
- convert from csv to jsonl?
- maybe convert csv to dict (like json to dict) to handle questions?

for report:
- add error log
- add time to generate
- add length of output

track down:
- Why 20tries?!>

In html report, make error-set,
and convert back to symbols for HTML


types of expected values

numbers -> float

string -> lower
 
boolean --- ?

how to handle None

make a list of case-specific check functions
 
    # Function to extract code from markdown, assuming it's already defined
    # Function to create_challenge_json, assuming it's already defined

    # Assuming challenge_data and other necessary variables are already defined
    
    
# 
string check
float check
int check
boolean check 
none check
list (one type)
dict (one type value)
set (one type value)
tuple (one type value)

    # Function to extract code from markdown, assuming it's already defined
    # Function to create_challenge_json, assuming it's already defined

    # Assuming challenge_data and other necessary variables are already defined

    # Example usage: Get the code from the test-taker (in Markdown format)
    code_markdown = input

    # Load the challenge JSON file to get function name and test cases
    with open("challenge.json", "r") as file:
    challenge_data = json.load(file)

    function_name = challenge_data["function_name"]
    test_cases = challenge_data["test_cases"]

    # Run the test
    run_test(code_markdown, test_cases, function_name)

for list a dict values
all same type?

list check
	string check
	float check
	int check
	boolean check 
	none check


dict check
	string check
	float check
	int check
	boolean check 
	none check

set check?
tuple check?


for python
for rust
for js/ts
for zig?
for go
for c
for assembler?


...

Why aren't the unit tests in the code itself?
why convert to string?

todo:
add config-jsons to the csv (clean text mode)
...
make one config file?

or two 2? 
model config...
test config


formatting tasks

asking the model to put data into a valid json
or reproduce one

test this by loading the json

alu equivilance check?
any false positives?



maybe update the python code test code to do a full code test inside python...like rust does


adding languages to coding challenges...
js/ts? add javascript coding challenges

future issue:
- internal vs. external code output checks

maybe add field to test-dict?


automated making code challenges...
with unit tests included
and comments on the mistakes...



